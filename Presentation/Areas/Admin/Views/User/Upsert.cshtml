@using RealEstate.App.Constants;
@using RealEstate.App.Interfaces;
@model UserVM
@inject IUserService userService

<div class="content">
    <partial name="_Navbar" />
    <div class="container-fluid pt-4 px-4 col-12 justify-content-between">
        <div class="row mb-3">
            <div class="col-10">
                <ol class="breadcrumb float-sm-right col-10 text-start">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">Users</a></li>
                    @if (string.IsNullOrEmpty(Model.Id))
                    {
                        <li class="breadcrumb-item active">Add</li>
                    }
                    else
                    {
                        <li class="breadcrumb-item">Edit</li>
                        <li class="breadcrumb-item active">@Model.Id</li>

                    }
                </ol>
            </div>
            <div class="col-2 text-end">
                <a asp-area="Admin" asp-controller="User" asp-action="Index" class="btn btn-primary ">Back to list</a>
            </div>
        </div>
        <form asp-area="Admin" asp-controller="User" asp-action="Upsert" method="post">
            <input type="hidden" asp-for="Id" />
            <div class="col-lg-12 col-12">
                <div class="form-floating mb-3  ">
                    <input type="email" asp-for="Email" class="form-control" id="floatingInput" placeholder="name@example.com">
                    <label for="floatingInput">Email address</label>
                    <span asp-validation-for="@Model.Email" class="text-danger"></span>
                </div>
            </div>

            @if (string.IsNullOrEmpty(Model.Id))
            {
                <div class=" row">
                    <div class="form-floating mb-3 col-sm-6 ">
                        <input type="password" asp-for="Password" class="form-control" id="floatingPassword" placeholder="Password">
                        <label for="floatingPassword">&nbsp; Password</label>
                        <span asp-validation-for="@Model.Password" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3 col-sm-6 ">
                        <input type="password" asp-for="ConfirmPassword" class="form-control" id="floatingPassword" placeholder="Password">
                        <label for="floatingPassword">&nbsp; Confirm Password</label>
                        <span asp-validation-for="@Model.ConfirmPassword" class="text-danger"></span>
                    </div>
                </div>
            }
            <div class="d-flex row">

                <div class="form-floating mb-3  col-sm-6 ">
                    <input type="text" asp-for="Name" class="form-control" id="floatingText" placeholder="text">
                    <label for="floatingText">&nbsp; Full Name</label>
                    <span asp-validation-for="@Model.Name" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3 col-sm-6">
                    <input asp-for="State" class="form-control" id="floatingText" placeholder="Password">
                    <label for="floatingText">&nbsp; State</label>
                    <span asp-validation-for="@Model.State" class="text-danger"></span>
                </div>
            </div>
            <div class="row justify-content-between">
                <div class="form-floating mb-3 col-sm-6">
                    <input asp-for="City" class="form-control" id="floatingText" placeholder="Password">
                    <label for="floatingText">&nbsp; City</label>
                    <span asp-validation-for="@Model.City" class="text-danger"></span>
                </div>

                <div class="form-floating mb-3 col-sm-6">
                    <input asp-for="PostalCode" class="form-control" id="floatingText" placeholder="Password">
                    <label for="floatingText">&nbsp; Postal Code</label>
                    <span asp-validation-for="@Model.PostalCode" class="text-danger"></span>
                </div>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="StreetAddres" class="form-control" id="floatingText" placeholder="Password">
                <label for="floatingText">&nbsp; Street Address</label>
                <span asp-validation-for="@Model.StreetAddres" class="text-danger"></span>
            </div>

            @if (userService.GetUserRole() == RoleConstants.Role_Admin)
            {

                <div class="form-floating mb-3 col-sm-12">
                    <select asp-for="@Model.Role" asp-items="@Model.RoleList" class="form-select">
                    </select>
                </div>
            }
            @if (string.IsNullOrEmpty(Model.Id))
            {
                <button type="submit" class="btn btn-primary py-3 w-100 mb-4 col-sm-6">Add User</button>

            }
            else
            {
                <button type="submit" class="btn btn-secondary py-3 w-100 mb-4 col-sm-6">Update</button>

            }
        </form>
    </div>
</div>

@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial" />
    }
    <script>
        $(document).ready(function () {

            $('#UserForm').validate({
                rules: {
                    Name: {
                        required: true,
                        minlength: 3,
                    },
                },
                Email: {
                    required: true,
                    email: true,
                },
                PhoneNumber: {
                    required: true,
                },
                Password: {
                    required: '@(Model.Id != "")' === '@true',
                    minlength: 8,
                    regex: "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@@$%^&*-]).{8,}$"
                },
                ConfirmPassword: {
                    required: '@(Model.Id != "")' === '@true',
                    minlength: 8,
                    equalTo: "#Password",
                },

            },
                messages: {
                Name: {
                    required: "FieldRequired')",
                    minlength: "MinLength3"
                },
                Email: {
                    required: "FieldRequired",
                    email: "EmailInvalidFormat",
                },
                PhoneNumber: {
                    required: "FieldRequired",
                },
                Password: {
                    required: "FieldRequired",
                    minlength: "MinLength8",
                    regex: "PasswordInvalidFormat"
                },
                ConfirmPassword: {
                    required: "FieldRequired",
                    minlength: "MinLength8",
                    equalTo: "PasswordNotMatch",
                },
            },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    error.addClass('invalid-feedback');
                    element.closest('.form-group').append(error);
                },
                highlight: function (element, errorClass, validClass) {
                    $(element).addClass('is-invalid');
                },
                unhighlight: function (element, errorClass, validClass) {
                    $(element).removeClass('is-invalid');
                },
                submitHandler: function (form) {
                    form.submit();
                }
                                                                                                                                                                                                                            });
                                                                                                                                                                                                                        })
    </script>
}

